openapi: 3.1.0
info:
  title: Dineroo API
  version: v1
  contact:
    name: API Management Team
    url: https://dineroo.api.com
    email: dineroo.cfg@gmail.com
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Restaurant Management
    description: Endpoints for managing restaurants, menus, and products
  - name: User Management
    description: Endpoints for managing users
  - name: Order Management
    description: Endpoints for managing orders
paths:
  /v1/users:
    post:
      tags:
        - User Management
      summary: Create a new user
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Created
          content: {}
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: The request payload is invalid.
                instance: /v1/users
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: ForbiddenError
                title: Forbidden
                status: 403
                detail: You do not have permission to create users.
                instance: /v1/users
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: ResourceConflict
                title: Resource conflict
                status: 409
                detail: A user with this email already exists.
                instance: /v1/users
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error occurred while creating user.
                instance: /v1/users
  /v1/users/token:
    post:
      tags:
        - User Management
      summary: Generate a user's token
      operationId: createToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Token successfully generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                expiresIn: 3600
                refreshExpiresIn: 86400
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Missing or invalid user credentials.
                instance: /v1/users/token
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: ForbiddenError
                title: Forbidden
                status: 403
                detail: User is not allowed to generate tokens.
                instance: /v1/users/token
        '409':
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: ResourceConflict
                title: Resource conflict
                status: 409
                detail: User already has an active token.
                instance: /v1/users/token
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error occurred while generating token.
                instance: /v1/users/token
  /v1/users/verify-code:
    post:
      tags:
        - User Management
      operationId: verifyCode
      summary: Verify the code send to user by sms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationCode'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid code format
                instance: /v1/users/verify-code
        '404':
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Verification code 4525' was not found.
                instance: /v1/users/verify-code
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while verifying code 3456.
                instance: /v1/users/verify-code
  /v1/users/upload-file:
    post:
      tags:
        - User Management
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid user id format
                instance: /v1/users/upload-file
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieve file.
                instance: /v1/users/upload-file
  /v1/users/{userId}/download-file:
    get:
      tags:
        - User Management
      operationId: downloadFile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: fileType
          in: query
          schema:
            type: string
            enum:
              - ID
              - PROFILE_PHOTO
              - RIB
              - GAIN_REPORT
          required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/users/{userId}/download-file
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieve file.
                instance: /v1/users/{userId}/download-file
  /v1/users/{userId}:
    put:
      tags:
        - User Management
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid code format
                instance: /v1/users/{userId}
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/users/{userId}
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/users/{userId}
  /v1/users/validate-code:
    post:
      tags:
        - User Management
      operationId: validateCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationCodeRequest'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          description: Code not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/users/validate-code
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/users/validate-code
  /v1/users/send-code:
    post:
      tags:
        - User Management
      operationId: sendVerificationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendCodeRequest'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/users/{userId}
  /v1/users/{userId}/reset-code-pin-with-id:
    put:
      tags:
        - User Management
      operationId: resetCodePinWithUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
        required: true
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/users/{userId}/reset-code-pin-with-id
        '404':
          description: Code not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/users/{userId}/reset-code-pin-with-id
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/users/{userId}/reset-code-pin-with-id
  /v1/users/{userId}/reset-code-pin-with-phone:
    put:
      tags:
        - User Management
      operationId: resetCodePinWithPhoneNumber
      parameters:
        - name: telephone
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
        required: true
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/users/{userId}/reset-code-pin-with-phone
        '404':
          description: Code not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/users/{userId}/reset-code-pin-with-phone
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/users/{userId}/reset-code-pin-with-phone
  /v1/users/{telephone}:
    get:
      tags:
        - User Management
      operationId: getUserByPhone
      parameters:
        - name: telephone
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid telephone format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid code phone number
                instance: /v1/users/{telephone}
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: User was not found.
                instance: /v1/users/{telephone}
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieve user.
                instance: /v1/users/{telephone}
  /v1/admin/couriers/decision:
    post:
      tags:
        - User Management
      operationId: approveOrRejectCourierRegistration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecisionRequest'
        required: true
      responses:
        '202':
          description: Accepted
          content: {}
        '400':
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid code format
                instance: /v1/admin/couriers/decision
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/admin/couriers/decision
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieve file.
                instance: /v1/admin/couriers/decision
  /v1/admin/couriers/pending-approval:
    get:
      tags:
        - User Management
      operationId: getPendingApprovalCouriers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourierRequest'
        '400':
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid code format
                instance: /v1/admin/couriers/pending-approval
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieve file.
                instance: /v1/admin/couriers/pending-approval
  /v1/admin/users/{userId}/logout:
    post:
      tags:
        - User Management
      operationId: logout
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/admin/users/{userId}/logout
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/admin/users/{userId}/logout
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error logout user.
                instance: /v1/admin/users/{userId}/logout
  /v1/admin/users/{userId}:
    patch:
      tags:
        - User Management
      operationId: disableAccount
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '400':
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid code format
                instance: /v1/admin/users/{userId}
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/admin/users/{userId}
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieve file.
                instance: /v1/admin/users/{userId}
  /v1/admin/users:
    get:
      '400':
        description: Invalid restaurant ID format
        content:
          application/problem+json:
            schema:
              $ref: ../components/responses/ErrorResponse.yaml
            example:
              type: about:blank
              title: Bad Request
              status: 400
              detail: Invalid code format
              instance: /v1/admin/users
      '500':
        description: Internal server error
        content:
          application/problem+json:
            schema:
              $ref: ../components/responses/ErrorResponse.yaml
            example:
              type: about:blank
              title: Internal Server Error
              status: 500
              detail: Unexpected error when retrieving error.
              instance: /v1/admin/users
      tags:
        - User Management
      operationId: getUsers
      parameters:
        - name: roles
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - CUSTOMER
                - DRIVER
                - GUEST
                - ADMIN
                - UNKNOWN
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /v1/organizations:
    post:
      tags:
        - Organization Management
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/organizations
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/organizations
    get:
      tags:
        - Organization Management
      operationId: getOrganizations
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/organizations
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/organizations
  /v1/organizations/{organizationId}/members:
    post:
      tags:
        - Organization Management
      operationId: addMembers
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Created
          content: {}
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/organizations/{organizationId}
        '404':
          description: Code not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: UserId was not found.
                instance: /v1/organizations/{organizationId}/members
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/organizations/{organizationId}/members
    get:
      tags:
        - Organization Management
      operationId: getOrganizationMembers
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid data
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid data
                instance: /v1/organizations
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error when retrieving error.
                instance: /v1/organizations
  /v1/restaurants:
    get:
      tags:
        - Restaurant Management
      summary: Retrieve all restaurants
      operationId: getRestaurants
      responses:
        '200':
          description: A list of available restaurants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantCollection'
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: An unexpected error occurred while processing your request.
                instance: /v1/restaurants
  /v1/restaurants/{restaurantId}:
    get:
      tags:
        - Restaurant Management
      summary: Retrieve a specific restaurant by ID
      operationId: getRestaurantById
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Restaurant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid UUID format
                instance: /v1/restaurants/invalid-id
        '404':
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Restaurant with ID 'dfa3ef5a-549e-4728-a3dd-1184039e540b' was not found.
                instance: /v1/restaurants/dfa3ef5a-549e-4728-a3dd-1184039e540b
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieving the restaurant.
                instance: /v1/restaurants/{restaurantId}
  /v1/restaurants/{restaurantId}/menus/{menuId}:
    get:
      tags:
        - Restaurant Management
      summary: Retrieve a menu by restaurant and menu ID
      operationId: getMenuById
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: menuId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Menu details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuResponse'
        '400':
          description: Invalid restaurant ID or menu ID format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid UUID format in restaurantId or menuId
                instance: /v1/restaurants/{restaurantId}/menus/{menuId}
        '404':
          description: Menu not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Menu with ID 'abc-123' not found for restaurant 'xyz-456'.
                instance: /v1/restaurants/xyz-456/menus/abc-123
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieving the menu.
                instance: /v1/restaurants/{restaurantId}/menus/{menuId}
  /v1/orders:
    get:
      tags:
        - Order Management
      summary: Retrieve all orders
      operationId: getAllOrders
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Invalid query parameters.
                instance: /v1/orders
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: No orders found for the given criteria.
                instance: /v1/orders
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error occurred while fetching orders.
                instance: /v1/orders
    post:
      tags:
        - Order Management
      summary: Create a new order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: 'Missing required field: deliveryAddress.'
                instance: /v1/orders
        '404':
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Restaurant with ID 'abc-123' was not found.
                instance: /v1/orders
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error occurred while creating order.
                instance: /v1/orders
  /v1/orders/{id}:
    get:
      tags:
        - Order Management
      summary: Retrieve a specific order by ID
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: The order ID must be a valid integer.
                instance: /v1/orders/abc
        '404':
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Order with ID '99999' was not found.
                instance: /v1/orders/99999
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error occurred while retrieving the order.
                instance: /v1/orders/{id}
  /v1/customers/{customerId}/orders:
    get:
      tags:
        - Order Management
      summary: Retrieve all orders for a specific customer
      operationId: getOrderByCustomerId
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: The customer ID is not a valid UUID.
                instance: /v1/customers/invalid-id/orders
        '404':
          description: Customer not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Customer with ID 'dfa3ef5a-549e-4728-a3dd-1184039e540b' was not found.
                instance: /v1/customers/dfa3ef5a-549e-4728-a3dd-1184039e540b/orders
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while retrieving orders for the customer.
                instance: /v1/customers/{customerId}/orders
  /v1/orders/{id}/cancel:
    patch:
      tags:
        - Order Management
      summary: Cancel an existing order
      operationId: cancelOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Cannot cancel this order
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Only pending orders can be cancelled.
                instance: /v1/orders/12/cancel
        '404':
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Not Found
                status: 404
                detail: Order with ID '12' was not found.
                instance: /v1/orders/12/cancel
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: about:blank
                title: Internal Server Error
                status: 500
                detail: Unexpected error while cancelling the order.
                instance: /v1/orders/{id}/cancel
components:
  schemas:
    Credential:
      type: object
      required:
        - temporary
        - type
        - value
      properties:
        type:
          type: string
          example: password
        value:
          type: string
          example: secret123
        temporary:
          type: boolean
          example: false
    CustomerRequest:
      type: object
      required:
        - firstName
        - lastName
        - telephone
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        firstName:
          type: string
          example: Alpha
        lastName:
          type: string
          example: Diallo
        telephone:
          type: string
          example: '+224620000000'
        email:
          type: string
          example: alpha.diallo@example.com
        address:
          type: string
          example: Rue 12, Kipé
    Menu:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb2-06a5-7154-9c66-cbb401865214
        name:
          type: string
          example: Akieke au poisson
        description:
          type: string
          example: Restaurant proposal
        imageUrl:
          type: string
          example: http://localhost:8080/api/images/restaurant/favela.png
        price:
          type: number
          format: float
          example: 26.9
    MenuResponse:
      allOf:
        - $ref: '#/components/schemas/Menu'
        - type: object
          properties:
            description:
              type: string
              example: Menu of the day
            products:
              type: array
              items:
                $ref: '#/components/schemas/Product'
              example:
                - id: 01962bb2-db70-7f03-8820-6e5f4e948515
                  name: Banane plantin
                  description: Banane plantin produite par des agriculteurs guinéens
                  imageUrl: http://localhost:8080/api/images/products/plantain.png
                  price: 45
                  productType: DISH
                - id: 01962bb2-dc21-75c9-99f9-78123c9e18f1
                  name: Jus de bissap
                  description: Boisson naturelle traditionnelle
                  imageUrl: http://localhost:8080/api/images/products/bissap.png
                  price: 15
                  productType: BEVERAGE
    OrderItemRequest:
      type: object
      required:
        - imageUrl
        - price
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: 01962bb2-db70-7f03-8820-6e5f4e948515
        menuId:
          type: string
          format: uuid
          example: 01962bb2-06a5-7154-9c66-cbb401865214
        imageUrl:
          type: string
          example: http://localhost:8080/api/images/products/plantain.png
        quantity:
          type: integer
          format: int32
          example: 2
        price:
          type: number
          format: double
          example: 45
    OrderItemResponse:
      type: object
      required:
        - imageUrl
        - orderId
        - price
        - quantity
      properties:
        id:
          type: integer
          format: int64
          example: 1001
        orderId:
          type: integer
          format: int64
          example: 2001
        productId:
          type: string
          format: uuid
          example: 01962bb2-db70-7f03-8820-6e5f4e948515
        menuId:
          type: string
          format: uuid
          example: 01962bb2-06a5-7154-9c66-cbb401865214
        imageUrl:
          type: string
          example: http://localhost:8080/api/images/products/plantain.png
        quantity:
          type: integer
          format: int32
          example: 3
        price:
          type: number
          format: double
          example: 45
    OrderRequest:
      type: object
      required:
        - deliveryAddress
        - orderItems
        - restaurantId
        - status
        - totalPrice
      properties:
        restaurantId:
          type: string
          format: uuid
          example: 01962bb7-8dc0-77fe-827e-61c22cea6028
        totalPrice:
          type: number
          format: double
          example: 120.5
        deliveryAddress:
          type: string
          example: Quartier Kipé, Conakry
        customer:
          $ref: '#/components/schemas/CustomerRequest'
        orderItems:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        status:
          type: string
          example: PENDING
    OrderResponse:
      type: object
      required:
        - deliveryAddress
        - id
        - orderItems
        - restaurantId
        - status
        - totalPrice
      properties:
        id:
          type: integer
          format: int64
          example: 1
        restaurantId:
          type: string
          format: uuid
          example: 01962bb7-8dc0-77fe-827e-61c22cea6028
        totalPrice:
          type: number
          format: double
          example: 120.5
        deliveryAddress:
          type: string
          example: Quartier Kipé, Conakry
        orderItems:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        status:
          type: string
          example: PENDING
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb2-db70-7f03-8820-6e5f4e948515
        name:
          type: string
          example: Banane plantin
        description:
          type: string
          example: Banane plantin produite par des agriculteurs guinéens
        imageUrl:
          type: string
          example: http://localhost:8080/api/images/products/plantain.png
        price:
          type: number
          format: float
          example: 45
        productType:
          type: string
          enum:
            - DISH
            - BEVERAGE
            - APPETIZER
            - DESSERT
          example: DISH
    Restaurant:
      type: object
      required:
        - id
        - name
        - menus
        - products
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb7-8dc0-77fe-827e-61c22cea6028
        name:
          type: string
          example: Nomad
        address:
          type: string
          example: Koloma Carrefour
        description:
          type: string
          example: Good restaurant with delicious dishes
        imageUrl:
          type: string
          example: http://localhost:8080/api/images/restaurants/nomad.png
        menus:
          type: array
          items:
            $ref: '#/components/schemas/Menu'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    RestaurantItem:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb7-8dc0-77fe-827e-61c22cea6028
        name:
          type: string
          example: Gastro Africa
        address:
          type: string
          example: Petit Simbaya
        description:
          type: string
          example: Restaurant de produits locaux
        imageUrl:
          type: string
          example: http://localhost:8080/api/images/restaurants/gastro-africa.png
    RestaurantCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RestaurantItem'
          example:
            - id: 01962bb7-8dc0-77fe-827e-61c22cea6028
              name: Gastro Africa
              address: Petit Simbaya
              description: Restaurant de produits locaux
              imageUrl: http://localhost:8080/api/images/restaurants/gastro-africa.png
            - id: 01962bb7-1111-2222-3333-444444444444
              name: Le Jardin Gourmand
              address: Dixinn Bora
              description: Cuisine guinéenne moderne
              imageUrl: http://localhost:8080/api/images/restaurants/jardin-gourmand.png
    User:
      type: object
      properties:
        telephone:
          type: string
          minLength: 1
          pattern: ^(?:\+224|00224)6\d{8}$
        firstName:
          type: string
          maxLength: 2147483647
          minLength: 2
        lastName:
          type: string
          maxLength: 2147483647
          minLength: 2
        enabled:
          type: boolean
        codePin:
          type: string
          pattern: ^\d{4}$
        role:
          type: string
          enum:
            - CUSTOMER
            - DRIVER
            - GUEST
            - ADMIN
      required:
        - codePin
        - role
        - telephone
    ErrorResponse:
      description: Error response
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              type:
                type: string
                format: uri
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
              instance:
                type: string
                format: uri
            required:
              - type
              - title
              - status
              - detail
    TokenRequest:
      type: object
      properties:
        telephone:
          type: string
          example: '+224623883048'
        codePin:
          type: integer
          format: int32
          example: 4567
      required:
        - codePin
        - telephone
    Token:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: integer
          format: int32
          example: 3600
        refreshExpiresIn:
          type: integer
          format: int32
          example: 86400
    VerificationCode:
      type: object
      properties:
        code:
          type: string
          example: 4356
          description: verification code
    FileUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        userId:
          type: string
        fileName:
          type: string
        fileType:
          type: string
          enum:
            - ID
            - PROFILE_PHOTO
            - RIB
            - GAIN_REPORT
      required:
        - file
        - fileName
        - fileType
        - userId
    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 2147483647
          minLength: 2
        lastName:
          type: string
          maxLength: 2147483647
          minLength: 2
        telephone:
          type: string
          pattern: ^(?:\+224|00224)6\d{8}$
        required:
          - telephone
    UserUpdateResponse:
      type: object
      properties:
        telephone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        required:
          - telephone
    ValidationCodeRequest:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
    SendCodeRequest:
      type: object
      properties:
        id:
          type: string
        telephone:
          type: string
          pattern: ^(?:\+224|00224)6\d{8}$
    CredentialRequest:
      type: object
      properties:
        codePin:
          type: string
          pattern: ^\d{4}$
      required:
        - codePin
    UserResponse:
      UserResponse: null
      type: object
      properties:
        id:
          type: string
        telephone:
          type: string
        role:
          type: string
          enum:
            - CUSTOMER
            - DRIVER
            - GUEST
            - ADMIN
            - UNKNOWN
        firstName:
          type: string
        lastName:
          type: string
        enabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED
      required:
        - telephone
    DecisionRequest:
      type: object
      properties:
        userId:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED
        reason:
          type: string
        comment:
          type: string
      required:
        - status
        - userId
    CourierRequest:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED
        reason:
          type: string
        comment:
          type: string
    OrganizationResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        state:
          type: string
          enum:
            - PRE_REGISTERED
            - AGREEMENT_PENDING
            - ADMIN_SETUP
            - ACTIVE
            - DECLINED
            - SUSPENDED
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
      required:
        - name
    CreateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
  responses:
    ErrorResponse:
      description: Error response
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              type:
                type: string
                format: uri
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
              instance:
                type: string
                format: uri
            required:
              - type
              - title
              - status
              - detail
