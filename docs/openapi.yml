openapi: 3.1.0
info:
  title: Dineroo API
  version: v1
  contact:
    name: API Management Team
    url: https://dineroo.api.com
    email: dineroo.cfg@gmail.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /v1/restaurants:
    get:
      tags:
        - Restaurant Management
      summary: Retrieve all restaurants
      operationId: getRestaurants
      responses:
        "200":
          description: A list of available restaurants
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantCollection"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/restaurants/{restaurantId}:
    get:
      tags:
        - Restaurant Management
      summary: Retrieve a specific restaurant by ID
      operationId: getRestaurantById
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Restaurant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "400":
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "404":
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                NotFound:
                  $ref: "#/components/schemas/ErrorResponse/examples/NotFound"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/restaurants/{restaurantId}/menus/{menuId}:
    get:
      tags:
        - Restaurant Management
      summary: Retrieve a menu by restaurant and menu ID
      operationId: getMenuById
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: menuId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Menu details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuResponse"
        "400":
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "404":
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                NotFound:
                  $ref: "#/components/schemas/ErrorResponse/examples/NotFound"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/users:
    post:
      tags:
        - User Management
      operationId: create
      summary: Create an user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
        required: true
      responses:
        "201":
          description: Created
          content: { }
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "403":
          description: Forbidden request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/Forbidden"
        409:
          description: Resource conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/Conflict"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/users/token:
    post:
      tags:
        - User Management
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "403":
          description: Forbidden request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/Forbidden"
        409:
          description: Resource conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/Conflict"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/orders:
    get:
      tags:
        - Order Management
      operationId: getAllOrders
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        "400":
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "404":
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                NotFound:
                  $ref: "#/components/schemas/ErrorResponse/examples/NotFound"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
    post:
      tags:
        - Order Management
      operationId: createOrder
      summary: create an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrderResponse'
        "400":
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "404":
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                NotFound:
                  $ref: "#/components/schemas/ErrorResponse/examples/NotFound"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/orders/{id}:
    get:
      tags:
        - Order Management
      operationId: getOrderById
      summary: Retrieve an order by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderResponse'
        "400":
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "404":
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                NotFound:
                  $ref: "#/components/schemas/ErrorResponse/examples/NotFound"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
  /v1/customers/{customerId}/orders:
    get:
      tags:
        - Order Management
      operationId: getOrderByCustomerId
      summary: Retrieve all order for a given customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InternalError:
                  $ref: "#/components/schemas/ErrorResponse/examples/InternalError"
        "400":
          description: Invalid restaurant ID format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                BadRequest:
                  $ref: "#/components/schemas/ErrorResponse/examples/BadRequest"
        "404":
          description: Restaurant not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                NotFound:
                  $ref: "#/components/schemas/ErrorResponse/examples/NotFound"


components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: "about:blank"
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
      examples:
        BadRequest:
          summary: Bad Request - Type mismatch
          value:
            type: "about:blank"
            title: "Bad Request"
            status: 400
            detail: "Invalid data"
            instance: ""
        NotFound:
          summary: Not Found - Restaurant does not exist
          value:
            type: "about:blank"
            title: "Not Found"
            status: 404
            detail: "Restaurant with ID 'dfa3ef5a-549e-4728-a3dd-1184039e540b' was not found."
            instance: "/v1/restaurants/dfa3ef5a-549e-4728-a3dd-1184039e540b"
        Forbidden:
          summary: Forbidden - insufficient permissions
          value:
            type: "ForbiddenError"
            title: "Forbidden"
            status: 403
            detail: "You do not have permission to perform this action"
        Conflict:
          summary: Conflict - user already exists
          value:
            type: "ResourceConflict"
            title: "Resource conflict"
            status: 409
            detail: "Username or email already exists"

        InternalError:
          summary: Internal Server Error
          value:
            type: "about:blank"
            title: "Internal Server Error"
            status: 500
            detail: "An unexpected error occurred while processing your request."
            instance: "/v1/restaurants"
    RestaurantCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/RestaurantItem"
    RestaurantItem:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb7-8dc0-77fe-827e-61c22cea6028
        name:
          type: string
          example: Gastro africa
        address:
          type: string
          example: Petit simbaya
        description:
          type: string
          example: Restaurant de produits locaux
        imageUrl:
          type: string
          example: "path/to/image.png"
    Restaurant:
      type: object
      required:
        - id
        - name
        - menus
        - products
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Nomad
        address:
          type: string
          example: Koloma carrefour
        description:
          type: string
          example: Good restaurant with delicious dishes
        imageUrl:
          type: string
          example: "path/to/image.png"
        menus:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Menu"
        products:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Product"
    MenuResponse:
      allOf:
        - $ref: "#/components/schemas/Menu"
        - type: object
          properties:
            description:
              type: string
              example: Menu of days
            products:
              type: array
              items:
                $ref: '#/components/schemas/Product'
    Menu:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb2-06a5-7154-9c66-cbb401865214
        name:
          type: string
          example: Akieke au poisson
        description:
          type: string
          example: "Restaurant proposal "
        imageUrl:
          type: string
          example: "http://localhost:8080/api/images/restaurant/favela.png"
        price:
          type: number
          format: float
          example: 26.9
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          example: 01962bb2-db70-7f03-8820-6e5f4e948515
        name:
          type: string
          example: Banane plantin
        description:
          type: string
          example: Banane plantin produit par les agriculteurs africains
        imageUrl:
          type: string
          example: "path/to/image.png"
        price:
          type: number
          format: float
          example: 45.0
        productType:
          type: string
          enum:
            - DISH
            - BEVERAGE
            - APPETIZER
            - DESSERT
    Credential:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        temporary:
          type: boolean
      required:
        - temporary
        - type
        - value
    UserRequest:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        enabled:
          type: boolean
        credentials:
          type: array
          items:
            $ref: "#/components/schemas/Credential"
      required:
        - credentials
        - username
    Token:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        refreshExpiresIn:
          type: integer
          format: int32
        expiresIn:
          type: integer
          format: int32
      required:
        - accessToken
        - refreshToken
    CustomerRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        telephone:
          type: string
        email:
          type: string
        address:
          type: string
      required:
        - firstName
        - lastName
        - telephone
    OrderItemRequest:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        menuId:
          type: string
          format: uuid
        imageUrl:
          type: string
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: double
      required:
        - imageUrl
        - price
        - quantity
    OrderRequest:
      type: object
      properties:
        restaurantId:
          type: string
          format: uuid
        totalPrice:
          type: number
          format: double
        deliveryAddress:
          type: string
        status:
          type: string
        customer:
          $ref: '#/components/schemas/CustomerRequest'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
          uniqueItems: true
      required:
        - deliveryAddress
        - orderItems
        - restaurantId
        - status
        - totalPrice
    OrderItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderId:
          type: integer
          format: int64
        productId:
          type: string
          format: uuid
        menuId:
          type: string
          format: uuid
        imageUrl:
          type: string
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: double
      required:
        - imageUrl
        - orderId
        - price
        - quantity
    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        restaurantId:
          type: string
          format: uuid
        totalPrice:
          type: number
          format: double
        deliveryAddress:
          type: string
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
          uniqueItems: true
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        status:
          type: string
      required:
        - deliveryAddress
        - id
        - orderItems
        - restaurantId
        - status
        - totalPrice


tags:
  - name: Restaurant Management
    description: Endpoints for managing restaurants, menus, and products
  - name: User Management
    description: Endpoints for managing users
  - name: Order Management
    description: Endpoints for managing orders
